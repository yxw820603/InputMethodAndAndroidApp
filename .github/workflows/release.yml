name: Release

on:
  release:
    types: [created]

jobs:
  build-and-package:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Get Latest CI Run ID
      id: get_run_id
      run: |
        workflow_name="Build"
        latest_run=$(curl -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.GH_PAT }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs" \
          | jq --arg workflow_name "$workflow_name" '.workflow_runs[] | select(.name == $workflow_name) | .id' | head -n 1)
        echo "run_id=$latest_run" >> $GITHUB_ENV
        echo "$lastest_run"

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GH_PAT }}
        run-id: ${{ env.run_id }}
        name: UDPInput
        path: UDPInput/build/

    - name: List Downloaded Artifacts
      run: |
        ls -l UDPInput/build/

    - name: Set up C++ environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake -q

    - name: Package C++ project
      run: |
        cd UDPInput/build
        make
        cpack
        /home/runner/work/InputMethodAndAndroidApp/InputMethodAndAndroidApp/UDPInput/build/_CPack_Packages/Linux/DEB/PreinstallOutput.log

    - name: Find generated .deb file
      id: find_deb
      run: |
        # 查找生成的 .deb 文件
        deb_file=$(find ./UDPInput/build/ -name "*.deb")
        echo "deb_file=$deb_file" >> $GITHUB_ENV

    - name: Upload .deb to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.deb_file }}
        asset_name: $(basename ${{ env.deb_file }})
        asset_content_type: application/octet-stream
